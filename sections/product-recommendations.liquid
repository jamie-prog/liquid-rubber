<link rel="stylesheet" href="{{ 'section-product-recommendations.css' | asset_url }}" media="print" onload="this.media='all'">
<noscript>{{ 'section-product-recommendations.css' | asset_url | stylesheet_tag }}</noscript>
<section class="c-recommendations bg-{{ section.settings.background-color }}">
  <div class="container">
    <div class="row">
      <div class="col-12">
        <product-recommendations class="product-recommendations page-width section-{{ section.id }}-padding isolate" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4">
          {% liquid
             if recommendations.performed and recommendations.products_count > 0
               assign headline = section.settings.heading | escape
               render 'recommended-product-preview', headline: headline, products: recommendations.products, color: section.settings.background-color, lazy: false, list_id: "related_products", list_name: "Related Products"
            endif
          %}
        </product-recommendations>
      </div>
    </div>
  </div>
</section>

{% javascript %}
  class ProductRecommendations extends HTMLElement {
    constructor() {
      super();

      const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(this);

        fetch(this.dataset.url)
          .then(response => response.text())
          .then(text => {
            const html = document.createElement('div');
            html.innerHTML = text;
            const recommendations = html.querySelector('product-recommendations');

            if (recommendations && recommendations.innerHTML.trim().length) {
              this.innerHTML = recommendations.innerHTML;
            }
          })
          .catch(e => {
            console.error(e);
          });
      }

      new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 200px 0px', threshold: 0.5}).observe(this);
    }
  }

  customElements.define('product-recommendations', ProductRecommendations);
{% endjavascript %}

{% schema %}
{
  "name": "t:sections.product-recommendations.name",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.product-recommendations.settings.paragraph__1.content"
    },
    {
      "type": "text",
      "id": "heading",
      "default": "Customers Also Purchased",
      "label": "t:sections.product-recommendations.settings.heading.label"
    },
    {
      "type": "select",
      "id": "background-color",
      "default": "gray",
      "label": "Background Color",
      "options": [
        {
          "value": "white",
          "label": "White"
        },
        {
          "value": "gray",
          "label": "Gray"
        }
      ]
    }
  ]
}
{% endschema %}
